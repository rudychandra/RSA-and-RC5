<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>PROSES MENGGUNAKAN MENU BANGKIT KUNCI:

1. Klik tombol Generate untuk memulai proses pembangkitan bilangan dan mendapatkan
    nilai P, Q, N, E, dan D.
2. Kemudian user dapat menyimpan kunci yang telah dibangkitkan. Apabila user ingin 
    mengulang kembali proses pembangkitan kunci, klik tombol Reset.
3. Selesai.
</value>
  </data>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>PROSES MENGGUNAKAN MENU ENKRIPSI:

1. Pertama-tama lakukan proses enkripsi pesan: Pilih file yang akan dienkripsikan dengan mengklik tombol Browse.
2. Setelah tampil pesan yang diinputkan di kolom Plaintext, kemudian input kunci RC5.
3. Setelah diinputkan, klik tombol Encrypt File untuk memulai proses enkripsi pesan.
4. Setelah tampil Ciphertext hasil enkripsi pesan serta waktu lamanya proses enkripsi pesan, kemudian user dapat menyimpan Ciphertext tersebut.
5. Setelah itu lakukan proses enkripsi kunci: Klik tombol Import Public Key untuk mengambil kunci publik yang tersimpan.
6. Setelah tampil Public Key (e) dan Public Key N, kemudian klik tombol Encrypt RC5 untuk memulai proses enkripsi kunci.
7. Setelah tampil Cipherkey hasil enkripsi kunci serta waktu lamanya proses enkripsi kunci, kemudian user dapat menyimpan Cipherkey tersebut.
8. Selesai</value>
  </data>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>PROSES MENGGUNAKAN MENU DEKRIPSI:

1. Pertama-tama lakukan dekripsi kunci: Pilih file Cipherkey yang akan didekripsikan dengan mengklik tombol Browse.
2. Setelah tampil pesan yang diinputkan di kolom Cipherkey, kemudian klik tombol Import Private Key untuk mengambil kunci privat yang tersimpan.
3. Setelah tampil Private Key (d) dan Private Key N, kemudian klik tombol Decrypt RC5 untuk memulai proses dekripsi kunci.
4. Kemudian akan tampil Plainkey hasil dekripsi kunci serta waktu lamanya proses enkripsi kunci.
5. Setelah itu lakukan dekripsi pesan: Pilih file Ciphertext yang akan didekripsikan dengan mengklik tombol Browse.
6. Setelah tampil pesan yang diinputkan di kolom Ciphertext, kemudian klik tombol Decrypt File untuk memulai proses dekripsi pesan.
7. Setelah tampil Plaintext hasil dekripsi pesan serta waktu lamanya proses dekripsi pesan, user dapat menyimpan Plaintext tersebut.
8. Selesai.</value>
  </data>
</root>